const jsonDatas = {
    P1C2E1: {
        h: "Appliquez le principe du DRY"
        , p: `Dans cet exercice, vous allez vous entra√Æner en cr√©ant une nouvelle classe et en s√©parant les propri√©t√©s typographiques pour les appliquer ind√©pendamment sur la div de votre choix.`
        , sol: ""
        , tasks: {
            p: `Regardons la classe heading et s√©parons ses concerns. Elle poss√®de toutes les propri√©t√©s qui permettent de cr√©er le style de nos titres, ainsi qu'une propri√©t√© qui convertit le texte en majuscules. Le probl√®me est que nous ne voulons pas toujours mettre nos titres en majuscules.
            Au lieu de cr√©er un titre en minuscules compl√®tement nouveau, d√©pla√ßons la propri√©t√© text-transform de heading dans une classe appel√©e .heading-caps. Ensuite, nous pouvons l'ajouter aux titres que nous souhaitons voir appara√Ætre en majuscules.`
            , ol: [
                `
                  Cr√©ez une nouvelle classe appel√©e .heading-caps
                `,
                `
                  D√©placez la propri√©t√© text-transform dans .heading-caps
                `,
                `
                  Dans le HTML, ajoutez "heading-caps" √† la classe du second titre.
                `,
            ]
        }
    }
    , 
    P1C2E2: {
        h: "L‚Äôimpact de la sp√©cificit√© sur la structure de votre code"
        , p: `Pratiquez en analysant la sp√©cificit√© entre deux s√©lecteurs de classe avec deux boutons et leur couleurs. üëå`
        , sol: ""
        , tasks: {
            p: `Nous avons une classe .btn pour le style de nos boutons, qui leur ajoute un fond vert-menthe. Mais nous avons
            d√©cid√© de cr√©er une nouvelle classe qui rend leur fond rose.La valeur hex est #EA526F. Mais... cela ne fonctionne
            pas. Nous l'avons ajout√©e √† notre second bouton mais il est toujours vert-menthe.
            Cela signifie que la classe .btn doit avoir une sp√©cificit√© plus haute que.btn-pink. Nous avons donc besoin de
            refactoriser notre CSS pour outrepasser la couleur de fond .btn quand nous appliquons.btn-pink.`
            , ol: [
                `Analysez le niveau de sp√©cificit√© des boutons dans le fichier CSS.`,
                `Refactorisez le CSS pour que .btn-pink passe au-dessus du fond .btn et passe le second bouton en rose.`,
                `Cela peut se faire en augmentant la sp√©cificit√© de .btn-pink, mais pour maintenir les diff√©rentes sp√©cificit√©s au minimum dans notre codebase, il vaut mieux r√©duire la sp√©cificit√© de ".btn"`,
            ]
        }
    }
    , 
    P1C3E1: {
        h: "Cr√©ez votre propre barre de navigation avec BEM"
        , p: `Adaptez le code fourni en utilisant la m√©thode BEM.`
        , sol: ""
        , tasks: {
            p: `Nous avons cr√©√© un sondage dans lequel nous pouvons d√©cider si un chiot est mignon ou tr√®√®√®√®s mignon. Mais maintenant que nous avons d√©couvert la beaut√© de BEM, notre CSS semble un peu d√©sordonn√©.

            Revenons en arri√®re et refactorons notre code en convertissant les classes qui forment notre bloc "sondage", en utilisant la m√©thodologie BEM.`
            , ol: [`Identifiez le bloc classe et utilisez-le comme une base pour nommer les √©l√©ments et les modificateurs.`,

            `Convertissez le nom des autres classes pour qu'elles deviennent des √©l√©ments et des modificateurs √† l'int√©rieur du bloc sondage`,
        
            `Mettez √† jour le HTML avec les noms de la nouvelle classe.`,
            ]
        }
    }
    , 
    P1C5E1: {
        h: "Pour bien d√©marrer avec la syntaxe SASS"
        , p: ``
        , sol: ""
        , tasks: {
            p: `Nous allons maintenant coder notre CSS dans le fichier SCSS. Ce code sera ensuite compil√© en un fichier CSS qui sera g√©n√©r√© dans le r√©pertoire /public/css/style.css Cela vous permettra de d√©couvrir la compilation Sass.`
            , ol: [
`Ajoutez deux propri√©t√©s CSS de votre choix comme background-color ou padding dans le fichier Sass en ciblant une classe appel√©e test`,

`Comparez votre .scss au .css compil√© (ils doivent √™tre identiques)`,

`Ajoutez la classe test √† la div HTML et observez les r√©sultats`,
            ]
        }
    }
    , 
    P1C5E2: {
        h: "Utilisez des s√©lecteurs √† l‚Äôint√©rieur d‚Äôautres s√©lecteurs : d√©couvrez le nesting !"
        , p: `Dans cet exercice, pratiquez le nesting : placez un s√©lecteur dans un autre.`
        , sol: ""
        , tasks: {
            p: `Donnons de la structure √† notre CSS et mettons en application nos connaissances sur le nesting. Nous avons un s√©lecteur .parent et un s√©lecteur .child. Organisons-les pour refl√©ter leurs relations en utilisant le nesting Sass, en pla√ßant les r√®gles de .child dans les r√®gles de .parent.`
            , ol: [
                `Nestez le s√©lecteur .child et son contenu dans .parent.`,
                `Regardez le CSS r√©sultant. La classe .child nest√©e devrait maintenant compiler en tant que .parent .child {...}`,
            ]
        }
    }
    , 
    P1C6E1: {
        h: "D√©couvrez d‚Äôautres types de combinateurs"
        , p: `Appliquez vos nouvelles connaissances des combinateurs dans cet exercice.`
        , sol: ""
        , tasks: {
            p: `Nous avons cr√©√© des s√©lecteurs dont le style se base sur leurs relations avec le s√©lecteur root. La codebase
            contient d√©j√† un s√©lecteur pour la classe root. Utilisons le nesting et les combinateurs pour ajouter du style
            aux √©l√©ments entourant et √† l'int√©rieur de l'√©l√©ment .root dans le fichier HTML.`
            , ol: [
                `Nestez un s√©lecteur de la classe .adjacent en utilisant le combinateur voisin ( + ) et assignez-lui le
                    background-color de votre choix.`,
        
                `Nestez un s√©lecteur de la classe .child en utilisant le combinateur enfant ( > ) et assignez-lui la
                    background-color de votre choix.`,
        
                `Nestez le s√©lecteur de la classe .descendant en utilisant un combinateur descendant.
        
                    Normalement, le combinateur descendant est un espace " ", mais avec Sass, nester directement un s√©lecteur va
                    compiler comme un espace du combinateur descendant dans le CSS.
        
                    Assignez la background-color de votre choix au s√©lecteur .descendant nest√©.
                `,
        
        
                `Regardez le r√©sultat HTML dans la fen√™tre du navigateur en cliquant sur le bouton "rafra√Æchir"`,
        
                `Regardez le CSS compil√©, qui se trouve dans /public/css/
        
                    Chaque classe combinateur devrait avoir pour pr√©fixe la classe.root et le symbole combinateur appropri√©.
                `,
            ]
        }
    }
    , 
    P1C6E2: {
        h: "Utilisez l‚Äôesperluette"
        , p: `Dans cet exercice, utilisez l‚Äôesperluette.`
        , sol: ""
        , tasks: {
            p: `Le nesting dans Sass est g√©nial mais parfois, il se peut que l'on veuilleur nester un s√©lecteur qui ne fonctionne pas comme les combinateurs CSS. C'est par exemple le cas des pseudo-s√©lecteurs comme :hover et :focus. Dans ce genre de cas, nous allons utiliser une esperluette (&) pour lier le nom du parent √† celui de l'enfant qui doit √™tre nest√©.`
            , ol: [
                `Nestez le s√©lecteur :focus dans la classe s√©leteur .input`,    `Ajoutez un nouveau background-color au s√©lecteur :focus`,    `Regardez le r√©sultat en effectuant une action dans la zone de texte situ√©e dans la fen√™tre de navigateur`,    `Regardez le r√©sultat dans le CSS. Le statut focus devrait avoir un style avec un s√©lecteur qui se compile ainsi .input:focus {...}`,
            ]
        }
    }
    , 
    P1C7E1: {
        h: "Int√©grez les notions apprises"
        , p: `Dans cet exercice, utilisez le refactoring sur un ancien exercice tout en faisant attention √† la sp√©cificit√©.`
        , sol: ""
        , tasks: {
            p: `Modifions le sondage du chiot dans lequel nous avons utilis√© BEM. Maintenant que vous avez compris le pouvoir du
            nesting dans Sass, et appris √† les :focus avec l'esperluette, refactorisons les composants de notre sondage pour
            qu'ils tiennent dans un nesting Sass, tout en ayant une sp√©cificit√© basse.`
            , ol: [
                `Nestez l'√©l√©ment et modifiez les s√©lecteurs √† l'int√©rieur du bloc .poll`,
                `Mettez √† jour le nom de chaque s√©lecteur, en rempla√ßant le pr√©fixe du bloc par l'esperluette &`,
                `Regardez le r√©sultat dans le HTML pour vous assurez que vous n'avez rien cass√©.`,
                `Regardez le CSS compil√©. Vous devriez voir les s√©lecteur BEM, qui sont identiques √† ce que nous avions dans
                  notre CSS √† la fin de l'exercice le partie 1, chapitre 3.`,
            ]
        }
    }
    , 
    P1C7E2: {
        h: "Utilisez les sp√©cificit√©s l√† o√π vous en avez besoin"
        , p: `Dans cet exercice, cr√©ez plusieurs s√©lecteurs et augmentez la sp√©cificit√©.`
        , sol: ""
        , tasks: {
            p: `Nous avons un bouton standard, dont le style est d√©fini par la classe .btn, qui configure aussi le background-color vert menthe. Nous avons aussi un bouton modifi√©, avec un background transparent, une bordure vert menthe et une couleur de fond, cr√©√©s gr√¢ce au modificateur .btn--outline.

            Maintenant, nous voulons obtenir une variante de la couleur de ces boutons, o√π .btn--pink rend le fond de .btn rose. Nous voulons √©galement cr√©er une alternative √† .btn--outline pour que la couleur de la bordure et la couleur de la police soient roses, plut√¥t que vert menthe.Mais nous ne voulons pas cr√©er un modificateur suppl√©mentaire et s√©par√©, qui cr√©erait deux esth√©tiques diff√©rentes du bouton, tout comme une nouvelle teinte rose.Nous voulons ajouter .btn--pink a un √©l√©ment qui a d√©j√† une classe .btn--outline et que notre bouton ait un contour rose.`
            , ol: [
                `Utilisez le nesting et l'esperluette (&) pour cr√©er un modificateur .btn--pink`,
                `Changez la couleur de fond de .btn--pink en #EA526F`,
                `Utilisez le nesting et l'esperluette (&) pour cr√©er un modificateur .btn--outline, et y rajouter les 3 r√®gles suivantes:  background-color: unset; border: 1px solid #15DEA5; color: #15DEA5;`,
                `Dans la branche .btn--outline du bloc .btn, nestez le nouveau s√©lecteur en utilisant l'esperluette (&) pour lier les 2classes ensemble (.btn--outline.btn--pink)`,
                `Dans .btn--outline.btn--pink, changez la couleur du bord et de la police en #EA526F`,
                `Regardez le r√©sultat dans le HTML. Il devrait y avoir un bouton vert menthe, une bouton vert menthe encadr√©, un bouton rose et un bouton rose encadr√©.`,
                `Regardez le CSS compil√©. Il devrait y avoir un s√©lecteur .btn, un s√©lecteur .btn--pink, un s√©lecteur .btn--outline et un s√©lecteur .btn--outline.btn--pink`,
            ]
        }
    }
    , 
    P2C1E1: {
        h: "Utilisez des variables pour g√©rer les couleurs"
        , p: `Dans cet exercice, remplacez les couleurs dans le code par des variables que vous allez cr√©er.`
        , sol: ""
        , tasks: {
            p: `Nos boutons sont soit vert menthe, soit rose, ce qui signifie que nous allons devoir utiliser ces deux couleurs un grand nombre de fois. Nettoyons tout cela et rempla√ßons ces couleurs par des variables.`
            , ol: [
                `Cr√©ez une variable pour stocker la couleur primaire vert menthe #15DEA5, nommez-la $color-primary et placez-l√† au-dessus de .btn {...}`,
                `Cr√©ez une variable pour stocker la couleur secondaire rose #EA526F, nommez-la $color-secondary et placez-l√† au-dessus de .btn{...}`,
                `Remplacez toutes les instances de #15DEA5 avec la nouvelle variable $color-primary`,
                `Remplacez toutes les instances de #EA526F avec la nouvelle variable $color-secondary`,
                `Rafra√Æchissez la page et v√©rifiez que rien n'a chang√© visuellement.`,
                `Mettez √† jour la valeur de la couleur stock√©e dans $color-primary avec la valeur de votre choix.`,
                `Rafra√Æchissez la page pour voir le premier bouton qui contient la nouvelle couleur.`,
                `Regardez le CSS. Sass a remplac√© les variables par leurs valeurs hex lors de la compilation`,
            ]
        }
    }
    , 
    P2C2E1: {
        h: "G√©rez les param√®tres du mixin"
        , p: `Dans cet exercice, pratiquez et cr√©ez une mixin qui contiendra les r√®gles des bordures.`
        , sol: ""
        , tasks: {
            p: `Nous utilisons des bordures partout sur notre site. Elles ont toutes la m√™me √©paisseur, une ligne continue et la m√™me couleur. Plut√¥t que d'avoir √† les taper √† la main, cr√©ons une @mixin. Cela va nous √©viter de les taper tout le temps et de mettre √† jour le style de la bordure de mani√®re globale, en mettant √† jour le contenu de la mixin.`
            , ol: [
                `Cr√©ez une mixin appell√©e border en utilisant le mot-cl√© @mixin. Placez-l√† entre $color-primary et .btn{...}`,
                `Ajouter une propri√©t√© border, avec une √©paisser de .1rem, une ligne continue et une couleur $color-primary`,
                `Remplacez toutes les instances de la propri√©t√© border dans la codebase par notre nouvelle mixin border, en utilisant le mot-cl√© @include`,
                `Regardez le rendu HTML pour vous assurer que les choses n'ont pas chang√© visuellement.`,
                `Regardez le CSS et remarquez que Sass remplace les instances de la mixin par le contenu d√©fini √† l'int√©rieur : border: .1rem solid #15DEA5;`,
            ]
        }
    }
    , 
    P2C2E2: {
        h: "Customisez la valeur par d√©faut de la mixin"
        , p: `√Ä pr√©sent, nous allons reprendre notre mixin du dernier exercice tout en l‚Äôam√©liorant pour qu‚Äôelle puisse √™tre utilis√©e, peu importe la couleur de la bordure que l‚Äôon souhaite appliquer.`
        , sol: ""
        , tasks: {
            p: `Nous avons cr√©e une mixin pour notre bordure, ce qui est assez cool. Mais on ne peut l'utiliser que dans nos boutons de couleur vert menthe. Mais nous avons aussi cr√©e ces boutons roses, dont les bordures peuvent √™tre modifi√©es certes mais √† la main. Aaaaarghhhh
            Adaptons notre mixin pour faire en sorte qu'elle accepte un argument appel√© $color, ce qui donne la possibilit√© de pr√©ciser la couleur de notre choix. Et comme nous avons cr√©e principalement des boutons verts menthe, pr√©cisons une valeur par d√©faut, qui ne nous oblige pas √† pr√©ciser vert-menthe √† chaque fois pour ces boutons l√†.`
            , ol: [
                `Ajoutez √† la mixin border un argument $color`,
                `Modifiez la propri√©t√© border pour utiliser la valeur $color que nous passons, plut√¥t que $color-primary`,
                `Ajoutez une valeur par d√©faut √† l'argument $color de $color-primary`,
                `Remplacez la propri√©t√© border situ√©e dans le s√©lecteur .btn--outline.btn--pink selector avec la mixin border`,
                `Passez en argument$color-secondary`,
                `V√©rifiez que le HTML n'a pas chang√© visuellement`,
                `V√©rifiez qu'avec le CSS compil√©, la mixin a compil√© la bordure et que vous obtenez une bordure de .1rem qui est solid, de la couleur que nous avons sp√©cifi√©, sauf si on en choisi une autre, auquel cas le code sera compil√© avec la valeur de $color-primary`,
            ]
        }
    }
    , 
    P2C3E1: {
        h: "Utilisez les extensions Sass"
        , p: `Dans cet exercice, reprenez ce que vous avez vu dans ce chapitre en unifiant la typographie de deux blocs gr√¢ce aux extensions.`
        , sol: ""
        , tasks: {
            p: `Notre site web est compos√© de diff√©rentes pages et mises en page comme .form et .proj-prev. Chaque bloc a besoin d'un √©l√©ment tire, qui devrait avoir les m√™mes r√®gles typographiques partout. Nous pourrions utiliser des mixins pour faire cela mais cela nous am√®nerait √† avoir du code r√©p√©titif dans notre CSS compil√©.

            √Ä la place, nous allons cr√©er un s√©lecteur .heading-typography et l'utiliser pour contenir tous les styles dont nos √©l√©ments titres ont besoins, et ensuite √©tendre les s√©lecteurs des titres √† .heading-typography.`
            , ol: [
                `Cr√©ez un s√©lecteur .heading-typography et donnez-lui des propri√©t√©s typographiques comme font-size, font-style, color, etc.`,
                `Utilisez le nesting et l'esperluette pour cr√©er des √©l√©ments de titre pour les blocs.form et .proj-prev`,
                `Utilisez le mot-cl√© @extend pour √©tendre nos nouveaux √©l√©ments .form__heading et .proj-prev__heading √† .heading-typography`,
                `Regardez le HTML. Les deux blocs devraient avoir les m√™mes propri√©t√©s et les m√™mes valeurs que celles d√©finies dans .heading-typography`,
                `Regardez le CSS compil√©. La r√®gle mise en place pour .heading-typography devrait √©galement avoir des s√©lecteurs de .form__heading and de .proj-prev__heading, s√©par√©s par des virgules.`,
            ]
        }
    }
    , 
    P2C3E2: {
        h: "Utilisez les placeholders"
        , p: `Dans cet exercice, cr√©ez et utilisez les placeholders.`
        , sol: ""
        , tasks: {
            p: `√âtendre nos √©l√©ments de titre √† .heading-typography fonctionne, mais nous avons une classe s√©lecteur qui n'est utilis√©e par aucun bloc ou √©l√©ment de notre site. Au lieude √ßa .heading-typography existe simplement pour .form__heading and .proj-prev__heading

            Avoir un s√©lecteur qui n'est pas utilis√© dans le CSS peut pr√™ter √† confusion notre futur nous, car nous pourrions ne pas nous souvenir qu'on l'utilise pour √©tendre d'autres √©l√©ments. Alors, au lieu de compiler des s√©lecteurs inutiles, changeons le s√©lecteur .heading-typography en placeholder !`
            , ol: [
                `Convertissez .heading-typography d'une classe s√©lecteur √† un placeholder en changeant le pr√©fixe "." par un signe pourcentage (%)`,
                `Mettez √† jour .form__heading et .proj-prev__heading de sorte √† les √©tendre au nouveau placeholder %heading-typography plus qu'au s√©lecteur .heading-typography qui n'existe plus`,
                `Regardez le rendu HTML pour vous assurer que rien n'a chang√© visuellement`,
                `Regardez le CSS compil√©. La r√®gle mise en place pour ,heading-typography devrait avoir .form__heading et .proj-prev__heading qui lui sont attach√©s. Cependant, il ne devrait y avoir aucune instance du s√©lecteur %heading-typography`,
            ]
        }
    }
    , 
    P2C5E1: {
        h: "D√©couvrez d‚Äôautres m√©thodes pour manipuler les couleurs"
        , p: `Apprenez √† utiliser les fonctions avec un cas pr√©cis : en g√©n√©rant une couleur en fonction d‚Äôune autre.`
        , sol: ""
        , tasks: {
            p: `Nous avons un √©l√©ment titre, .form__heading, √† qui nous avons assign√© manuellement la couleur #fff. G√©n√©rons une couleur de titre bas√©e sur la couleur primaire de la page $color-primary.

            Parmi les fonctions disponibles dans Sass, il existe la fonction adjust-hue(), qui accepte deux arguments. Le premier argument est la couleur que vous souhaitez ajuster et le second est de quels degr√©s vous souhaitez l'ajuster. Il y a 360¬∞ sur la roue colorim√©trique, donc un changement de 360¬∞ donnerait la m√™me couleur, un changement de 180 degr√©s donnerait une couleur compl√©mentaire... Pour en savoir plus sur ce sujet : http://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_hue-instance_method
            
            Utilisons adjust-hue() pour d√©finir la couleur de .form__heading en utilisant $color-primary comme point de d√©part.`
            , ol: [
                `Remplacez la valeur #fff de la propri√©t√© color de .form__heading par la fonction adjust-hue()`,
                `Passez adjust-hue() comme premier argument de $color-primary `,
                `Ajoutez un second argument avec le degr√© que vous souhaitez appliquer.`,
                `Regardez le rendu de la page et les couleurs r√©sultant de notre adjust-hue()`,
                `Regardez le CSS. La valeur compil√©e de la propri√©t√© .form__heading est le r√©sultat de adjust-hue()`,
                `Ajustez la valeur assign√©e √†$color-primary avec la couleur de votre choix`,
                `Regardez le rendu de la page HTML. La couleur de fond du titre devrait avoir chang√© pour la nouvelle valeur $color-primary et la couleur du titre devrait √©galement avoir chang√©.`,
            ]
        }
    }
    , 
    P2C6E1: {
        h: "D√©couvrez les conditions"
        , p: `Dans cet exercice, ajustez la couleur d‚Äôun bouton en utilisant les conditions.`
        , sol: ""
        , tasks: {
            p: `Quand nous survolons nos boutons, nous pouvons dire que nous les survolons parce que le curseur change de forme lorsque nous sommes sur le bouton. Donner une indication visuelle claire √† l'utilisateur lorsqu'il survole un bouton va augmenter l'exp√©rience utilisateur.

            Donnons √† notre utilisateur une feedback visuel en modifiant la teinte de fond de notre bouton au survol de la souris. Mais, plut√¥t que de toujours utiliser la m√™me teinte, avec le m√™me nombre de degr√©s, rendons cette couleur ind√©pendante.
            
            Si la teinte du bouton est inf√©rieure √† 180 degr√©s, alors nous augmenterons la couleur de 30 degr√©s au survol. Mais si elle est sup√©rieure ou √©gale √† 180 degr√©s, alors nous baisserons la couleur de 60 degr√©s.
            
            Pour avoir la bonne teinte, nous allons utiliser la fonction hue() dans Sass, qui accepte une couleur unique en tant qu'argument et retourne la bonne teinte.
            
            Pour en savoir plus sur la fonctionhue(), consultez sa documentation : http://sass-lang.com/documentation/Sass/Script/Functions.html#hue-instance_method`
            , ol: [
                `Cr√©ez une mixin appel√©e hover avec un argument appel√© $color`,
                `Cr√©ez un statut @if/@else avec un statut conditionnel qui dit "si la teinte $color est inf√©rieure √† 180"`,
                `Ajustez la teinte de $color de 30 si la condition est vraie en utilisant la fonction adjust-hue()`,
                `Ajustez la teinte de $color de -60 si la condition est fausse`,
                `Utilisez le nesting, l'esperluette et le pseudo-s√©lecteur :hover et cr√©ez un s√©lecteur hover pour .btn`,
                `Incluez la mixin hover dans le s√©lecteur .btn:hover, avec la valeur de couleur utilis√©e dans la propri√©t√© background .btn comme argument`,
                `Regardez le rendu de votre page. Survolez le bouton pour voir le changement de couleur.`,
                `Regardez le CSS compil√©. Le s√©lecteur .btn:hover devrait contenir la propri√©t√© background avec la valeur de teinte chang√©e.`,
            ]
        }
    }
    , 
    P2C6E2: {
        h: "Dans quelle condition se trouve ma condition ?"
        , p: `Reprenez le code de l‚Äôexercice pr√©c√©dent et allez plus loin avec les conditions et les arguments.`
        , sol: ""
        , tasks: {
            p: `Prenons la mixin hover que nous avons cr√©√©e et affinons-la. Actuellement, la teinte augmente de 30 degr√©s si la teinte est inf√©rieure √† 180 degr√©s et diminue de 60 degr√©s si elle est sup√©rieure ou √©gale √† 180 degr√©s. C'est l'un ou l'autre. Mais nous pouvons utiliser plus qu'une condition pour cr√©er une s√©rie de valeurs √† affecter gr√¢ce au statut @if, entour√© des valeurs qui retourne false.

            Au lieu d'avoir une seule condition qui dit que la teinte est inf√©rieure √† 180 degr√©s, cr√©ons une s√©rie de valeurs qui vont √™tre vraies si la teinte est sup√©rieure ou √©gale √† 135 degr√©s et inf√©rieure √† 180 degr√©s. Et pour ces valeurs, ajustons la teinte de fa√ßon plus radicale, de 180 degr√©s.
            
            Nous pouvons le faire gr√¢ce √† la fonction adjust-hue() ou plus simplement avec la fonction complement(), qui retourne automatiquement la couleur compl√©mentaire de la couleur pass√©e en argument.
            
            Vous pouvez regarder la documentation ici : http://sass-lang.com/documentation/Sass/Script/Functions.html#complement-instance_method`
            , ol: [
                `Alt√©rez la condition contenue dans la mixin hover pour obtenir la condition "la teinte est sup√©rieure ou √©gale √† 135" : avec le signe>=`,
                `Ajoutez une seconde condition en utilisant le mot-cl√© and, suivi de la condition "la teinte est inf√©rieure √† 180" ou "hue is less than ( < ) 180" en anglais.`,
                `Mettez √† jour l'op√©ration @if en utilisant la fonction complement(), avec la propri√©t√© background-color du bouton pass√©e en argument $color-primary`,
                `Regardez le rendu sur la page. La valeur assign√©e √† $color-primary, #15DEA5, a une teinte de 163 degr√©s, donc la couleur du bouton au survol devrait √™tre son compl√©ment, c'est-√†-dire rose`,
                `Regardez le CSS compil√©. Le s√©lecteur .btn:hover devrait avoir une background-color de #DE154E qui est le compl√©ment de #15DEA5`,
                `Ajustez la couleur de $color-primary (par exemple avec #19647E) et regardez comment la couleur du bouton change lorsque vous passez au dessus.`,
            ]
        }
    }
    , 
    P2C7E1: {
        h: "Cr√©ez des fonctions"
        , p: `Dans cet exercice, entra√Ænez-vous aux fonctions en cr√©ant une fonction qui change une couleur en une couleur pastel, avec le code fourni dans l‚Äôexercice.`
        , sol: ""
        , tasks: {
            p: `Nous avons utilis√© un bon nombre de fonctions Sass pour cr√©er des couleurs. Maintenant, essayons de cr√©er notre propre fonction. Plut√¥t que de faire varier la teinte de notre bouton quand on passe dessus, changeons la couleur de fond pour obtenir une version pastel de la couleur originale.

            Les couleurs pastel ont tendance √† avoir une saturation de 100 % et une luminosit√© d'environ 90 %. Nous avons donc les valeurs "s" et "l" de la fonction hsl(). Ce qui nous manque est la teinte, que nous pouvons extraire en utilisant la fonction Sass hue()`
            , ol: [
                `D√©clarez une nouvelle fonction en utilisant le mot-cl√© @function et donnez-lui le nom pastel`,
                `Ajoutez un argument √† notre nouvelle fonction pastel() appel√© $clr, qui correspond √† la couleur que nous voulons transformer en couleur pastel`,
                `Ajoutez des accolades apr√®s les parenth√®ses`,
                `√Ä l'int√©rieur des accolades, d√©clarez la variable $hue et assignez-lui la valeur de teinte $clr`,
                `Cr√©ez une variable pour la saturation de notre couleur pastel appel√©e $sat et donnez lui une valeur de 100%`,
                `Cr√©ez une variable pour la luminosit√© de notre couleur pastel appel√©e $light et donnez lui une valeur de90%`,
                `Cr√©ez une variable pour notre nouvelle couleur pastel appel√©e $pastel, et utilisez la fonction hsl() pour cr√©er sa valeur, en passant $hue, $sat et $light en tant que valeurs`,
                `Il est maintenant temps de retourner notre couleur pastel en utilisant le mot-cl√© @return, suivi de la valeur que nous voulons retourner, $pastel`,
                `Utilisons notre nouvelle fonction pastel() pour configurer la background-color de .btn:hover, en passant la background-color .btn de $color-primary en argument`,
                `Pour rendre la police plus lisible quand on passe dessus, configurons la couleur de la police de .btn:hover avec la valeur originale de $color-primary`,
                `Regardez le rendu sur le site. Lorsqu'il est survol√©, le bouton doit devenir d'un vert menthe pastel, avec le vert menthe original et lumineux de $color-primary comme couleur de police`,
                `Regardez le CSS compil√©, .btn:hover devrait avoir une background-color #CCFFEF, qui est une version pastel de la $color-primary #15DEA5`,
            ]
        }
    }
    , 
    P3C1E1: {
        h: "D√©couvrez le mod√®le 7-1"
        , p: `Dans cet exercice, entra√Ænez-vous et cr√©ez les sept directories du 7-1 pattern via le terminal ou via le panneau de navigation.`
        , sol: ""
        , tasks: {
            p: `Nettoyons notre codebase. Notre fichier Sass devient de plus en plus long et scroller commence √† devenir p√©nible. Nous pouvons commencer par mettre en place des dossier organisant notre code selon le pattern 7-1.`
            , ol: [
                `√Ä l'int√©rieur de sass/ directory, cr√©ez des dossiers pour chacune des 7 cat√©gories du pattern 7-1 : Base, Utils, Layout, Components, Pages, Themes et Vendors`,
                `Vous pouvez le faire en cliquant sur "create directory" et en nommant le nouveau dossier correctement.`,
                `Ou vous pouvez le faire gr√¢ce au terminal :`,
                `Tout d'abord, changez de dossier pour aller dans le dossier Sass en tapant "cd sass"`,
                `Ensuite, cr√©ez les nouveaux dossiers gr√¢ce √† la commande mkdir, suivie de la liste des dossiers que vous souhaitez cr√©er.`,
            ]
        }
    }
    , 
    P3C1E2: {
        h: "Nettoyez et r√©organisez vos fichiers"
        , p: `Dans cet exercice, regroupez les couleurs dans un nouveau fichier.`
        , sol: ""
        , tasks: {
            p: `Maintenant que nous avons configur√© un dossier structur√©, nous pouvons commencer √† diviser notre codebase en morceaux plus facilement g√©rables. Bougeons nos variables dans un autre fichier, appel√© partiel en Sass.`
            , ol: [
                `Cr√©ez un fichier dans utils/ directory s'appellant _variables.scss. Le pr√©fixe _ est important !`,
                `D√©placez les variables pr√©sentes dans main.scss vers notre nouveau partiel variables.`,
                `Importez le partiel variables dans main.scss gr√¢ce au mot-cl√© @import et le trajet vers le fichier variables`,
                `Regardez le rendu de la page. Assurez-vous que tout s'affiche correctement`,
                `En bonus, cr√©ez, compl√©tez et importez les partiels de layout/_form.scss, layout/_nav.scss, layout/_header.scss, utils/mixins.scss, utils/functions.scss, etc`,
            ]
        }
    }
    , 
    P3C2E1: {
        h: "D√©couvrez la compilation en mode compress√©"
        , p: `Installez Sass et compilez le code donn√© en exemple en suivant les √©tapes vues dans ce chapitre.`
        , sol: ""
        , tasks: {
            p: `Donnons de la structure √† notre CSS et mettons nos connaissances sur le nesting en pratique. Actuellement, nous avons un s√©lecteur .parent et un s√©lecteur .child. Organisons-les pour refl√©ter leur relation en utilisant le nesting sass. Pour cela, pla√ßons les r√®gles de .child √† l'int√©rieur des r√®gles de .parent`
            , ol: [
                `Dans le terminal, tapez npm init et r√©pondez aux indications comme vous le souhaitez.`,
                `Dans le terminal, tapez npm install sass -g pour installer Sass dans le syst√®me`,
                `Ajoutez une cl√© √† l'objet "scripts" appel√©e "sass"`,
                `Pour les valeurs-cl√© Sass, √©crivez le script qui permet de compiler le CSS dans public/css/styles.css`,
                `Regardez la console pour vous assurer que Sass re-compile le CSS avec les fichiers Sass sauvegard√©s.`,
            ]
        }
    }
    , 
    P3C3E1: {
        h: "Utilisez les mixins avec les maps"
        , p: `Mettez en application vos nouvelles connaissances dans cet exercice o√π vous devez conserver les couleurs des boutons, tout en adaptant le code avec les listes et les maps.`
        , sol: ""
        , tasks: {
            p: `Donnons de la structure √† notre CSS en mettant en application nos connaissances des maps. Actuellement, vous avez un s√©lecteur .btn et trois boutons de couleurs diff√©rentes.

            G√©n√©rons les s√©lecteurs de nos boutons avec une map !`
            , ol: [
                `D√©clarez une nouvelle variable appel√©e $btn-mods et placez des parenth√®ses qui contiendront les cl√©s map et leurs valeurs`,
                `Cr√©ez une cl√© appel√©e "pink" pour le bouton rose modifi√© et donnez-lui la valeur $color-secondary`,
                `Cr√©ez une cl√© appel√©e "blue" pour le bouton bleu modifi√© et donnez-lui la valeur $color-tertiary`,
                `Remplacez les valeurs de $color-secondary et $color-tertiary par les valeurs issues de map en utilisant la fonction map-get()`,
                `Regardez le rendu sur la page pour vous assurer que tous les boutons apparaissent correctement`,
            ]
        }
    }
    , 
    P3C4E1: {
        h: "Pour chacun et jusqu‚Äôau dernier"
        , p: `Dans l‚Äôexercice qui suit, cr√©ez une boucle pour g√©n√©rer les couleurs des boutons fournis dans l‚Äôexercice.`
        , sol: ""
        , tasks: {
            p: `Maintenant que nous avons une palette de nos modificateurs de boutons stock√©e dans map, √©conomisons du travail en faisant en sorte que Sass g√©n√®re automatiquement les s√©lecteurs en se basant sur le contenu de la map $btn-mods`
            , ol: [
                `Stockez votre boucle conditionnelle dans une mixin appel√©e btn-mods avant un argument pour $map`,
                `√Ä l'int√©rieur de la mixin, configurez une boucle @each avec les variables $mod et $val pour le contenu de $map`,
                `√Ä l'int√©rieur de la boucle @each, utilisez la syntaxe d'interpolation pour compl√©ter le s√©lecteur apr√®s une esperluette et deux tirets : &--#{$mod}`,
                `√Ä l'int√©rieur du s√©lecteur modificateur, cr√©ez une propri√©t√© background et donnez-lui la valeur $val`,
                `Supprimer les s√©lecteurs &--pink {...} et &--blue {...} et leurs propri√©t√©s`,
                `Incluez les mixin btn-mods √† la fin du block .btn, en passant en argument $btn-mods`,
                `Regardez le CSS compil√©. Sass devrait avoir g√©n√©r√© les modificateurs btn--pink et btn--blue avec la couleur de fond appropri√©e`,
                `V√©rifiez le rendu de la page et assurez-vous que les boutons s'affichent avec les bonnes couleurs`,
            ]
        }
    }
    , 
    P3C5E1: {
        h: "Ajoutez des breakpoints pour une mise en page responsive"
        , p: `Dans cet exercice,  il vous faut passer en responsive la section image du code fourni, en vous basant sur ce que vous venez d‚Äôapprendre.`
        , sol: ""
        , tasks: {
            p: `Regardons notre page de wireframes. Nous avons un bloc image, un bloc r√©sum√© et un bloc texte. Les blocs image et r√©sum√© sont au m√™me niveau. L'image prend 60 % de la largeur et le r√©sum√© occupe le reste de l'espace gr√¢ce √† la propri√©t√© flex-grow. Le texte se trouve sous ces blocs et occupe 100 % de la largeur.

            Cela semble parfait sur un grand √©cran. Mais si nous r√©duisons la taille de l'√©cran, pour avoir un affichage mobile, les choses se compliquent. Le r√©sum√© est sur sa propre ligne, ce qui correspond √† ce que nous voulions, mais l'image occupe seulement 60 % de la largeur, ce qui n'est pas ce que nous voulons. Pour rendre l'affichage sur mobile fonctionnel, utilisons les media queries pour passer la largeur de l'image √† 100 % quand le navigateur a une largeur inf√©rieure √† 600px..`
            , ol: [
                `Cr√©ez une media query dans le s√©lecteur .article__image gr√¢ce au mot-cl√© @media`,
                `Configurez la query pour que la propri√©t√© max-width ait une valeur de 599px`,
                `Ajoutez des accolades { } apr√®s la liste de query`,
                `√Ä l'int√©rieur des accolades, placez les propri√©t√©s √† appliquer quand la largeur de la fen√™tre de navigateur est inf√©rieure ou √©gale √† 599px, c'est-√†-dire configurez la largeur √† 100%`,
                `Regardez le rendu sur la page. Modifiez la taille de la fen√™tre du navigateur et assurez vous que l'image change de largeur lorsque le navigateur est inf√©rieur √† 600px de largeur`,
                `Regardez le CSS compil√©. En dehors du s√©lecteur .article__image, il devrait y avoir une media query pour .article__selector ayant une max-width de 559px et une propri√©t√© width √† 100 %`,
            ]
        }
    }
    , 
    P3C5E2: {
        h: "Utilisez les breakpoints avec Sass"
        , p: `Dans l‚Äôexercice pr√©c√©dent, vous avez rendu responsive le bloc image ; il est temps de faire de m√™me avec le bloc article !`
        , sol: ""
        , tasks: {
            p: `Nous avons r√©gl√© le probl√®me de la largeur de l'image mais il y a d'autres √©l√©ments √† prendre en compte pour que notre article soit responsive. L'article en lui-m√™me est un bon point de d√©part. Il a une largeur de 75% mais comme l'image, nous aimerions qu'il occupe toute la largeur si on le regarde sur un mobile. Nous allons aussi rendre le r√©sum√© un peu plus gros en augmentant la taille de la police.

            Nous pourrions cr√©er une autre media query mais en prenant en compte le principe DRY, il serait plus appropri√© d'√©largir la port√©e de la media query que nous avons faite pour notre image et de la mettre dans une mixin en utilisant la directive @content.`
            , ol: [
                `Cr√©ez une mixin appell√©e mobile-only`,
                `Coupez la media query de .article__image et copiez-la dans la mixin mobile-only`,
                `Remplacez la propri√©t√© width par la directive Sass @content`,
                `Incluez la mixin mobile-only dans .article__image, en utilisant des accolades pour inclure les r√®gles que vous voulez placer dans la media query de la mixin : width: 100%`,
                `Faites la m√™me chose pour le s√©lecteur .article, en configurant sa largeur √† 100 %`,
                `Incluez la mixin mobile-only dans la mixin .article__summary et configurez la police √† 1.5rem`,
                `Examinez la page rendue. Lorsque le navigateur est ramen√© √† une largeur de taille mobile, le bloc d'articles doit occuper 100 % de la largeur de la fen√™tre, tout comme l'image. La taille de la police du r√©sum√© doit augmenter de 50 % et passer √† 1,5rem.`,
                `Regardez le CSS compil√©. Chaque s√©lecteur qui contient la mixin mobile-only devrait d√©sormais avoir une media query contenant les propri√©t√©s que nous avons incluses dans l'instance de la mixin`,
            ]
        }
    }
    , 
}